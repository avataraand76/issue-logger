function doPost(e) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = JSON.parse(e.postData.contents);

  if (data.action === "addIssue") {
    // Add new issue
    sheet.appendRow([
      data.submissionTime,
      data.lineNumber,
      data.stationNumber,
      data.scope,
      data.machineryType || "",
      data.code || "",
      data.issue,
      data.remediation,
      data.problemSolver,
      data.responsiblePerson,
      "", // Empty column for endTime
      "" // Empty column for downtime (minutes)
    ]);

    return ContentService.createTextOutput(JSON.stringify({status: 'success', action: 'addIssue'}))
      .setMimeType(ContentService.MimeType.JSON);
  } 
  else if (data.action === "updateIssue") {
    // Update issue
    var row = data.id + 1; // +1 because the first row is the header
    sheet.getRange(row, 5).setValue(data.machineryType || ""); // Column E
    sheet.getRange(row, 6).setValue(data.machineryCode || ""); // Column F
    sheet.getRange(row, 7).setValue(data.description); // Column G
    sheet.getRange(row, 8).setValue(data.remediation); // Column H
    sheet.getRange(row, 9).setValue(data.problemSolver); // Column I
    sheet.getRange(row, 11).setValue(data.endTime); // Column K
    sheet.getRange(row, 12).setValue(data.downtimeMinutes); // Column L

    return ContentService.createTextOutput(JSON.stringify({status: 'success', action: 'updateIssue'}))
      .setMimeType(ContentService.MimeType.JSON);
  }
  else if (data.action === "endIssue") {
    // Update end time
    var row = data.id + 1; // +1 because the first row is the header
    var startTime = sheet.getRange(row, 1).getValue(); // Get start time from column A
    var endTime = data.endTime;

    sheet.getRange(row, 11).setValue(endTime); // Update end time in column K

    // Calculate downtime
    var downtimeMinutes = calculateDowntime(startTime, endTime);

    sheet.getRange(row, 12).setValue(downtimeMinutes); // Add downtime (minutes) to column L

    return ContentService.createTextOutput(JSON.stringify({status: 'success', action: 'endIssue'}))
      .setMimeType(ContentService.MimeType.JSON);
  }

  return ContentService.createTextOutput(JSON.stringify({status: 'error', message: 'Invalid action'}))
    .setMimeType(ContentService.MimeType.JSON);
}

function doGet() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var issues = [];

  for (var i = 1; i < data.length; i++) {
    issues.push({
      id: i,
      submissionTime: data[i][0],
      lineNumber: data[i][1],
      stationNumber: data[i][2],
      scope: data[i][3],
      machineryType: data[i][4],
      code: data[i][5],
      issue: data[i][6],
      remediation: data[i][7],
      problemSolver: data[i][8],
      responsiblePerson: data[i][9],
      endTime: data[i][10] || null,
      downtime: data[i][11] || null // Downtime in minutes
    });
  }

  return ContentService.createTextOutput(JSON.stringify(issues))
    .setMimeType(ContentService.MimeType.JSON);
}

function calculateDowntime(startTime, endTime) {
  var start = new Date(startTime.replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3"));
  var end = new Date(endTime.replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3"));
  var diff = (end - start) / (1000 * 60); // Convert to minutes
  return Math.round(diff);
}